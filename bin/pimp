#!/bin/bash
# pimp: pimp virtual environment to support setup/teardown
# Copyright (c) 2024 Bluenetics GmbH
# SPDX-License-Identifier: Apache-2.0

#===============================================================================
# pimp -?;  pimp --help   # show usage
#===============================================================================

   if [ "$*" == "-?" ] || [ "$*" == "--help" ] || [ "$*" == "--?" ]; then
      pimp ---g   "pimp virtual environment (version `pimp --version`)"
      pimp ---y   'usage: pimp [-ci?] [--<opt>] [<venv>] [<bin>]'
      echo        '  . pimp                     # pimp, consign, install and activate virtual environment'
      echo        '  pimp @venv                 # pimp @venv to support setup/cleanup'
      echo        '  pimp @venv .pimp/bin       # also install binaries of .pimp/bin in @venv'
      echo        '  pimp -d                    # deploy files in .pimp/deploy into binary system folder'
      echo        '  pimp -d <bin>              # deploy files in .pimp/deploy into given <bin> folder'
      echo        '  pimp -i                    # init a .pimp directory'
      echo        '  pimp -i @venv              # init a .pimp dir for @venv with setup/cleanup samples'
      echo        '  pimp -m                    # init a sample west manifest directory'
      echo        '  pimp -?                    # show usage'
      echo        '  pimp --help                # comprehensive help'
      echo        '  pimp --version             # print version'
      if [ "$*" != "-?" ]; then
        pimp ---y "more commands"
        echo      '  . pimp --activate          # locate and activate virtual environment'
        echo      '  . pimp --activate @venv    # activate given virtual environment @venv'
        echo      '  pimp --check @venv         # check if @venv is already pimped'
        echo      '  pimp --consign             # consign binaries and set x-permissions to .pimp/bin'
        echo      '  pimp --copy @venv <bin>    # set x-permissions & copy <bin> files to @venv/bin'
        echo      '  pimp --deploy              # deploy files in .pimp/deploy into binary system folder'
        echo      '  pimp --deploy <bin>        # deploy files in .pimp/deploy into given <bin> folder'
        echo      '  pimp --init                # init a .pimp directory'
        echo      '  pimp --init @venv          # init a .pimp dir for @venv with setup/cleanup samples'
        echo      '  pimp --install             # install pimp in $BIN directory'
        echo      '  pimp --install pimp <bin>  # install pimp in <bin> directory'
        echo      '  pimp --manifest            # init a sample west manifest directory'
        echo      '  pimp --path <dir>          # examine path of directory in upward hierarchy'
        echo      '  pimp --pimp                # actually pimp'
        echo      '  pimp --update              # update current pimp installation to latest version'
        echo      '  pimp --venv                # echo name of virtual environment directory'
        echo      '  pimp --zephyr              # pimp virtual environment for zephyr'
      fi

      return 0 2>/dev/null || exit 0  # safe return/exit
   fi

#===============================================================================
# pimp --version   # print version
#===============================================================================

   if [ "$*" == "--version" ] || [ "$*" == "--v" ]; then
      echo "1.0.0";
      return 0 2>/dev/null || exit 0  # safe return/exit
   fi

#===============================================================================
# examine whether this script is running in sourced/unsourced mode
# - note: each dispatching clause needs to unset _SOURCED
#===============================================================================

   (return 0 2>/dev/null) && _SOURCED=1 || _SOURCED=0  # determine _SOURCED

#===============================================================================
# pimp --path <dir>   # examine path of directory in upward hierarchy
#===============================================================================

   if [ "$*" == "" ]; then
      if [ "$_SOURCED" != 0 ]; then
         bash pimp ---all  # pimp (create/consign/install) virtual environment
         source pimp --activate # activate virtual environment

         unset _SOURCED
         return 0 2>/dev/null || exit 0  # safe return/exit
      else
         bash pimp ---r "error: pimp $*" >&2
         echo           "       source this command line! ('source pimp' or '. pimp')" >&2
         return 1 2>/dev/null || exit 1  # safe return/exit
      fi
   fi

#===============================================================================
# . pimp --activate        # locate and activate virtual environment
# . pimp --activate @venv  # activate given virtual environment
#===============================================================================

   if [ "$1" == "--activate" ] && [ "$3" == "" ]; then
      if [ "$_SOURCED" == 0 ]; then
         bash pimp ---r "error: pimp $*" >&2
         echo      "     this command line must be sourced!" >&2
         echo      "     => enter: source pimp --activate" >&2
         unset _SOURCED
         return 1 2>/dev/null || exit 1  # safe return/exit
      fi

      if [ "$2" == "" ]; then
         _VENV=`pimp --venv`
      else
         _VENV=$2
      fi

      if [ ! -d "$_VENV" ]; then
         bash pimp ---r "error: pimp $*" >&2
         echo      "       unable to locate virtual environment" >&2

         unset _VENV
         unset _SOURCED
         return 1 2>/dev/null || exit 1  # safe return/exit
      fi

      source $_VENV/bin/activate

      unset _VENV
      unset _SOURCED
      return 0 2>/dev/null || exit 0  # safe return/exit
   fi

#===============================================================================
#===============================================================================
# after here only non sourced execution is allowed
#===============================================================================
#===============================================================================

    if [ "$_SOURCED" != 0 ]; then
        pimp ---r "bad command line: source pimp $* (or: . pimp $*)"
        echo      "    this command is not allowed to run in sourced mode!"
        unset _SOURCED
        return 1 2>/dev/null || exit 1  # safe return/exit
    fi

#===============================================================================
# pimp -!   # install in a system binary directory
#===============================================================================

   if [ "$*" == "-!" ]; then
      if [ ! -f ~pimp ]; then
         bash ~pimp ---r "error: pimp -!" >&2
         echo      "       file ~pimp not found!" >&2
         exit 1
      fi
      chmod +x ~pimp

      bash ~pimp ---y "select target directory for installation of pimp:"
      LIST=`pimp --directories`
	    select DIR in $LIST
	    do
         ERR="0"
         touch $DIR/_junk_ >/dev/null || ERR="1"
         rm -f $DIR/_junk_ >/dev/null

         bash ~pimp ---g "=== installing pimp in $DIR ..."
         if [ "$ERR" == "0" ]; then       # no write protection
            bash ~pimp ---y "  cp ~pimp $DIR/pimp"
            cp ~pimp $DIR/pimp || exit 1
         else                             # write protection
            bash ~pimp ---y "  this is a protected directory which uses a password!"
            bash ~pimp ---y "  sudo cp ~pimp $DIR/pimp"
            sudo cp ~pimp $DIR/pimp || exit 1
         fi
         bash ~pimp ---g "=== sucessful installation of pimp"
         echo '  => enter: pimp -?   # to see usage'

         rm -f ~pimp                      # cleanup
 	       exit 0
	    done
      exit 0
   fi

#===============================================================================
# pimp ---directories   # generate list of install directories
#===============================================================================

   if [ "$*" == "--directories" ]; then
      LIST=''
      for CHUNK in $(echo "$PATH" | sed 's/:/ /g')
      do
         LIST="$LIST $CHUNK"
      done
      echo $LIST
      exit 0
   fi

#===============================================================================
# pimp --path <dir>   # examine path of directory in upward hierarchy
#===============================================================================

   if [ "$1" == "--path" ] && [ "$3" == "" ]; then
      DIR=`pwd`/$2
      #ec -g "DIR=$DIR"
      if [ -d "$DIR" ]; then
         echo $DIR
         exit 0
      fi

      if [ "`pwd`" == "/" ]; then
         exit 1
      fi

      cd ..
      pimp --path $2 || exit 1
      exit 0
   fi

#===============================================================================
# pimp --consign   # consign binaries and set x-permissions to .pimp/bin
#===============================================================================

   if [ "$*" == "--consign" ]; then
      PIMP=`pimp --path .pimp` || exit 1

      if [ ! -f "$PIMP/consign" ]; then
         pimp ---r "error: pimp $*" >&2
         echo      "       missing consignment file: $PIMP/consign" >&2
         exit 1
      fi

      if [ ! -d "$PIMP/bin" ]; then
         mkdir $PIMP/bin || exit 1
      fi

         # consign files listed in consignment file

      pimp ---g "=== consigning files (=> $PIMP/bin)"

      ROOT=${PIMP%"/.pimp"}
      FILES=`cat $PIMP/consign`

      for FILE in $FILES
      do
         echo "  $FILE -> $PIMP/bin"
         ERR=0
         cp $ROOT/$FILE $PIMP/bin/ || ERR=1
         if [ "$ERR" != "0" ]; then
            pimp ---r "error: pimp $*" >&2
            echo      "       unable to consign file: $FILE" >&2
         fi
      done

      chmod +x $PIMP/bin/*
      exit 0
   fi

#===============================================================================
# pimp --deploy       # deploy files into .pimp/deploy to binary system folder'
# pimp --deploy <bin> # deploy files into given <bin> folder'
#===============================================================================

   if [ "$1" == "--deploy" ] || [ "$1" == "-d" ]; then
      if [ "$3" == "" ]; then
         PIMP=`pimp --path .pimp`
         ROOT=$(dirname $PIMP)

         if [ "$PIMP" == "" ]; then
            bash pimp ---r "error: pimp $*" >&2
            echo           "       no .pimp directory found" >&2
            exit 1
         fi

         if [ ! -f $PIMP/deploy ]; then
            bash pimp ---r "error: pimp $*" >&2
            echo           "       no deployment list (file $PIMP/deploy) provided" >&2
            exit 1
         fi

         if [ "`cat $PIMP/deploy`" == "" ]; then
            pimp ---g "=== empty deploy list (nothing to deploy)"
            exit 0
         fi

            # if arg2 is not provided we select target directory from a list

         if [ "$2" == "" ]; then
            bash pimp ---y "select target directory for deployment:"
            LIST=`pimp --directories`
	          select BIN in $LIST
	          do
               pimp --deploy $BIN
               exit 0
            done
            exit 1
         fi

            # otherwise we use arg2 as target directory

         BIN=$2

            # we need to examine whether target directory is protected

         ERR="0"
         touch $BIN/_junk_ >/dev/null || ERR="1"
         rm -f $BIN/_junk_ >/dev/null

            # first show deployment status

         TOOLS=`pimp ---deploy-status $BIN`
         if [ "$TOOLS" == "" ]; then
            pimp ---g "everything up-to-date (no further deployment action)"
            exit 0
         fi

            # prompt to confirm deployment

         pimp ---y "confirm deployment!"
         read -p "go ahead [Y/n]?" ANS
 		     if [ "$ANS" != "Y" ] && [ "$ANS" != "y" ] && [ "$ANS" != "" ]; then
			      exit 0
		     fi

            # actual deployment

         bash pimp ---g "=== deploying tools in $BIN ..."
         SRC=$PIMP/bin

			   for TOOL in $TOOLS
			   do
            FILE="${TOOL##*/}"
			      VSRC=`bash $ROOT/$TOOL --version 2>/dev/null`
			      VDST=`bash $BIN/$FILE --version 2>/dev/null`

	          if [ "$VDST" == "" ] && [ ! -f $BIN/$FILE ]; then
	             VDST='not installed'
	          fi

	          if [ "$VSRC" == "" ]; then VSRC='???'; fi
	          if [ "$VDST" == "" ]; then VDST='???'; fi

	          if [ "$VSRC" != '???' ] && [ "$VDST" != '???' ]; then
	             if [ "$VSRC" != "$VDST" ]; then
                  if [ "$ERR" == "0" ]; then
   	                 echo "    cp $ROOT/$TOOL $BIN;  chmod +x $BIN/$FILE"
	                   cp $ROOT/$TOOL $BIN;  chmod +x $BIN/$FILE
                  else
   	                 echo "    sudo cp $TOOL $BIN;  sudo chmod +x $BIN/$FILE"
	                   sudo cp $TOOL $BIN;  sudo chmod +x $BIN/$FILE
                  fi
	             fi
	          else
	             pimp ---m "    note: not updating $TOOL"
	             pimp ---m "          reason: missing version information (upgrade version $VSRC to $VDST)"
	             pimp ---m "          (you may manually delete the installed tool)"
	          fi
			   done

         pimp ---g "=== deployment complete!"
         exit 0
      fi
   fi

#===============================================================================
# tools ---deploy-status <dst>  # show deployment status"
#===============================================================================

   if [ "$1" == "---deploy-status" ] && [ "$2" != "" ] && [ "$3" == "" ]; then
      PIMP=`pimp --path .pimp`
      ROOT=$(dirname $PIMP)

      BIN=$2
      SRC=$PIMP/bin

      ec -g "deployment status:" 1>&2
      ec -y "tools to be deployed into $BIN:" 1>&2

      TOOLS=''
      for TOOL in `cat $PIMP/deploy`
      do
         FILE="${TOOL##*/}"
         VSRC=`bash $ROOT/$TOOL --version 2>/dev/null`
         VDST=`bash $BIN/$FILE --version 2>/dev/null`

         if [ "$VDST" == "" ] && [ ! -f $BIN/$FILE ]; then
            VDST='not installed'
         fi

         if [ "$VSRC" == "" ]; then VSRC='???'; fi
         if [ "$VDST" == "" ]; then VDST='???'; fi

	       if [ "$VSRC" != "$VDST" ]; then
            TOOLS="$TOOLS $TOOL"
         fi

         TOOLSTR=$TOOL':                                   '

         AVAIL="$VSRC"',                                  '
         if [ "$VSRC" != "$VDST" ]; then
            pimp ---c "    ${TOOLSTR:0:20} available: ${AVAIL:0:20} current: $VDST" 1>&2
         else
            echo "    ${TOOLSTR:0:20} available: ${AVAIL:0:20} current: $VDST" 1>&2
         fi
      done

      if [ "$TOOLS" != "" ]; then
         echo $TOOLS
      fi
      exit 0
   fi

#===============================================================================
# pimp --init  (pimp -i)            # init a .pimp directory'
# pimp --init @venv (pimp -i @venv) # init a .pimp directory with setup/cleanup samples
#===============================================================================

   if [ "$1" == "--init" ] || [ "$1" == "-i" ]; then
      if [ "$3" == "" ]; then
         PIMP=.pimp
         VENV=$2
         #if [ "$VENV" == "" ]; then
         #   pimp ---r "error: pimp $*" >&2
         #   echo      "       missing arg2 (name of virtual environment to be created)" >&2
         #   exit 1
         #fi

         if [ -d "$PIMP" ]; then
            pimp ---r "error: pimp $*" >&2
            echo      "       directory $PIMP already existing (stop processing)" >&2
            exit 1
         fi

         pimp ---g "=== initializing .pimp directory ..."

            # make .pimp and .pimp/bin directories and provide .pimp/venv

         mkdir $PIMP || exit 1

            # provide consign and deploy skeletons

         touch $PIMP/consign
         touch $PIMP/deploy

            # for empty arg2 we are done

         if [ "$VENV" == "" ]; then exit 0; fi

            # for nonempty arg2 we continue preparing venv creation

		     PIMPBIN=$PIMP/bin
		     mkdir $PIMPBIN || exit 1
		     echo $2 >$PIMP/venv

		        # provide a setup sample

		     echo '#!/bin/bash' >$PIMPBIN/setup.sh
		     echo '# setup (setup script for virtual environment)' >>$PIMPBIN/setup.sh
		     echo '' >>$PIMPBIN/setup.sh
		     echo "echo '=== setup virtual environment ...'" >>$PIMPBIN/setup.sh

		        # provide a cleanup sample

		     echo '#!/bin/bash' >$PIMPBIN/cleanup.sh
		     echo '# setup (cleanup script for virtual environment)' >>$PIMPBIN/cleanup.sh
		     echo '' >>$PIMPBIN/cleanup.sh
		     echo "echo '=== cleanup virtual environment ...'" >>$PIMPBIN/cleanup.sh

		        # add virtual environment name to .gitignore

		     if [ -d ".git" ]; then
		        if [ -f ".gitignore" ]; then
		           cat .gitignore | grep "$VENV" >/dev/null && exit 0  # nothing to do
		        fi

		        read -p "shall I add $VENV to .gitignore [Y/n]?" ANS
		        if [ "$ANS" != "Y" ] && [ "$ANS" != "y" ] && [ "$ANS" != "" ]; then
		           exit 0
		        fi

 		        pimp ---g "=== adding $VENV to .gitignore"
		        echo '' >>.gitignore
		        echo '# virtual environment folder' >>.gitignore
		        echo "$VENV" >>.gitignore
		     fi
		     exit 0
      fi
   fi

#===============================================================================
# pimp --install <pimp> [<bin>]  # install pimp in <bin> or $BIN directory
#===============================================================================

   if [ "$1" == "--install" ] && [ "$2" != "" ] && [ "$4" == "" ]; then
      shift

      if [ "$1" == "" ]; then
         pimp --consign || exit 1
         exit 0
      fi

      if [ "$2" != "" ]; then   # <bin> arg provided!
         BIN=$2
      else
         if [ "$BIN" == "" ]; then
            pimp ---r "error: pimp $*" >&2
            echo      '       environment variable BIN=$BIN' >&2
            echo      '       consider to set something similar to: $ export BIN=~/bin' >&2
            exit 1
         fi
      fi

         # check that $BIN is a directory

      if [ ! -d "$BIN" ]; then
         pimp ---r "error: pimp $*" >&2
         echo      "       no directory: BIN=$BIN" >&2
         exit 1
      fi

         # check that arg1 is a file

      if [ ! -f "$1" ]; then
         pimp ---r "error: pimp $*" >&2
         echo      "       arg1 is not denoting a file: $1" >&2
         exit 1
      fi

         # everything good - install!

      pimp ---g "=== installing $1 in $BIN" >&2
      cp $1 $BIN || exit 1
      chmod +x $BIN/pimp || exit 1
      exit 0
   fi

#===============================================================================
# pimp --manifest (pimp -m)   # init a sample west manifest directory'
#===============================================================================

   if [ "$*" == "--manifest" ] || [ "$*" == "-m" ]; then
      PIMP=`pimp --path .pimp`
      ROOT=$(dirname $PIMP)
      MANIFEST=$ROOT/manifest
      WEST=$MANIFEST/west.yml

      if [ -d "$MANIFEST" ]; then
         pimp ---r "error: pimp $*" >&2
         echo      "       west manifest directory (manifest) exists (stop processing): $1" >&2
      fi

         # create manifest folder

      mkdir $MANIFEST || exit 1

         # create manifest file

      echo 'manifest:' >>$WEST || exit 1
      echo '  version: 0.8' >>$WEST || exit 1
      echo '' >>$WEST || exit 1
      echo '  projects:' >>$WEST || exit 1
      echo '    - name: echo-colored-text' >>$WEST || exit 1
      echo '      url: https://github.com/bluccino/tool-ec.git' >>$WEST || exit 1
      echo '      revision: 1.0.0' >>$WEST || exit 1
      echo '      path: deps/tool-ec' >>$WEST || exit 1

      pimp ---g "=== west manifest skeleton file (manifest/west.yml) created!"
      exit 0
   fi

#===============================================================================
# pimp --pimp   # actually pimp virtual environment
#===============================================================================

   if [ "$*" == "--pimp" ]; then
      ACTIVATE=`pimp --venv`/bin/activate

      if [ ! -f "$ACTIVATE" ]; then
         pimp ---r "error: pimp $*" >&2
         echo      "       no virtual environment directory found (in current directory)" >&2
         exit 1
      fi

      FOUND="1"
      cat $ACTIVATE | grep /bin/setup.sh >/dev/null || FOUND="0"
      if [ $FOUND == "1" ]; then
         pimp ---y "no action: $ACTIVATE is already pimped"
         exit 0
      else
         pimp ---g "=== pimping $ACTIVATE"
         pimp ---pimp-setup $ACTIVATE
         pimp ---pimp-cleanup $ACTIVATE
      fi

      exit 0
   fi

#===============================================================================
# helper: pimp ---pimp-setup <activate>
#===============================================================================

  if [ "$1" == '---pimp-setup' ] && [ "$2" != "" ] && [ "$3" == "" ]; then
    ACTIVATE=$2
    echo '' >>$ACTIVATE
    echo '# custom setup' >>$ACTIVATE
    echo 'if [ -f "$VIRTUAL_ENV/bin/setup.sh" ]; then' >>$ACTIVATE
    echo '  source $VIRTUAL_ENV/bin/setup.sh' >>$ACTIVATE
    echo 'fi' >>$ACTIVATE
    exit 0
  fi

#===============================================================================
# helper: pimp ---pimp-cleanup <activate>
#===============================================================================

if [ "$1" == '---pimp-cleanup' ] && [ "$2" != "" ] && [ "$3" == "" ]; then
  ACTIVATE=$2
  sed '/deactivate ()/  a\
    ' $ACTIVATE > $ACTIVATE.tmp
  sed '/deactivate ()/  a\
fi\
    ' $ACTIVATE.tmp >$ACTIVATE
  sed '/deactivate ()/  a\
    source $VIRTUAL_ENV/bin/cleanup.sh\
    ' $ACTIVATE > $ACTIVATE.tmp
  sed '/deactivate ()/  a\
    if [ -f "$VIRTUAL_ENV/bin/cleanup.sh" ]; then\
    ' $ACTIVATE.tmp > $ACTIVATE
  rm $ACTIVATE.tmp
  exit 0
fi

#===============================================================================
# pimp --venv   # locate virtual environment folder
#===============================================================================

   if [ "$*" == "--venv" ]; then
      FILES=`ls -a`
      for DIR in $FILES
      do
         if [ -d "$DIR" ] && [ "$DIR" != "." ] && [ "$DIR" != ".." ]; then
            if [ -f $DIR/bin/activate ]; then
               echo $DIR
               exit 0
            fi
         fi
      done
      exit 1
   fi

#===============================================================================
# pimp --zephyr   # pimp virtual environment for zephyr
#===============================================================================

   if [ "$*" == "--zephyr" ]; then
      PIMP=`pimp --path .pimp`
      if [ "$PIMP" == "" ]; then
         bash pimp ---r "error: pimp $*" >&2
         echo           "       no .pimp directory found" >&2
         exit 1
      fi

      if [ ! -d "$PIMP" ]; then
         pimp ---r "error: pimp $*" >&2
         echo      "       missing .pimp directory" >&2
         echo      "       => consider: pimp --init <venv>" >&2
         exit 1
      fi
      if [ ! -f "$PIMP/bin/setup.sh" ]; then
         pimp ---r "error: pimp $*" >&2
         echo      "       missing .pimp/bin/setup.sh script" >&2
         exit 1
      fi
      if [ ! -f "$PIMP/bin/cleanup.sh" ]; then
         pimp ---r "error: pimp $*" >&2
         echo      "       missing .pimp/bin/cleanup.sh script" >&2
         exit 1
      fi

      pimp ---g "=== pimping .pimp for zephyr"

      echo '' >>$PIMP/bin/setup.sh
      echo '# setting ZEPHYR_BASE' >>$PIMP/bin/setup.sh
      echo "export ZEPHYR_BASE=`pwd`/zephyr" >>$PIMP/bin/setup.sh

      echo '' >>$PIMP/bin/cleanup.sh
      echo '# unsetting ZEPHYR_BASE' >>$PIMP/bin/cleanup.sh
      echo "unset ZEPHYR_BASE" >>$PIMP/bin/cleanup.sh
      exit 0
   fi

#===============================================================================
# helper: pimp ---r 'text arg'   # internal helper: echo in red color
#         pimp ---g 'text arg'   # internal helper: echo in green color
#         pimp ---y 'text arg'   # internal helper: echo in yellow color
#===============================================================================

   if [ "$1" == "---r" ]; then
      printf "\x1b[31m";  shift;  echo "$*";  printf "\x1b[0m"
      exit 0
   fi

   if [ "$1" == "---g" ]; then
      printf "\x1b[32m";  shift;  echo "$*";  printf "\x1b[0m"
      exit 0
   fi

   if [ "$1" == "---y" ]; then
      printf "\x1b[33m";  shift;  echo "$*";  printf "\x1b[0m"
      exit 0
   fi

   if [ "$1" == "---m" ]; then
      printf "\x1b[35m";  shift;  echo "$*";  printf "\x1b[0m"
      exit 0
   fi

   if [ "$1" == "---c" ]; then
      printf "\x1b[36m";  shift;  echo "$*";  printf "\x1b[0m"
      exit 0
   fi

#===============================================================================
# pimp --update   # update current pimp installation to latest version
#===============================================================================

	 if [ "$1" == "--update" ]; then
	    URL=https://raw.githubusercontent.com/bluccino/tool-pimp/master/bin/pimp
      PIMP=`which pimp`

	    pimp ---g '=== updating pimp ...'

	    echo "  curl -s $URL >~pimp"
	    curl -s $URL >~pimp

      ERR="0"
      rm -f $PIMP >/dev/null || ERR="1"

      if [ "$ERR" == "0" ]; then
	       echo "  cp ~pimp $PIMP"
         cp ~pimp $PIMP
	       echo "  chmod +x $PIMP"
         chmod +x $PIMP
      else
	       echo "  sudo cp ~pimp $PIMP"
         cp ~pimp $PIMP
	       echo "  sudo chmod +x $PIMP"
         chmod +x $PIMP
      fi

      pimp ---g "pimp update complete (version `pimp --version`)"
	    exit 0
	 fi

#===============================================================================
# pimp ---all   # pimp, consign and install files in virtual environment
#===============================================================================

   if [ "$*" == "---all" ]; then
      PIMP=.pimp
      ROOT=`pwd`
      VENV=`pimp --venv`

         # check existence of virtual environment, and occasionally create

      if [ "$VENV" == "" ]; then
         if [ -f $PIMP/venv ]; then
            VENV=`cat $PIMP/venv`
            pimp ---c "virtual environment not existing!"

            read -p "shall I create virtual environment $VENV [Y/n]?" ANS
				    if [ "$ANS" != "Y" ] && [ "$ANS" != "y" ] && [ "$ANS" != "" ]; then
				       exit 0
				    fi

            if [ "`which python3`" == "" ]; then
               pimp ---r "python3 is not installed"
               echo      '=> please install python3 (versin >= 3.11)'
               exit 1
            fi

            pimp ---g "=== creating virtual environment $VENV ..."
            python3 -m venv $VENV || exit 1

         else
            pimp ---r "error: pimp $*" >&2
            echo      "       virtual environment not existing" >&2
            exit 1
         fi
      fi

         # next we pimp the virtual environment

      pimp --pimp

         # optional operations regarding west

      if [ -f $ROOT/manifest/west.yml ] || [ -d $ROOT/.west ]; then
         INSTALLED="1"
         OLD=$PATH
         PATH=$VENV/bin:$PATH
         which west | grep `pimp --venv` >/dev/null || INSTALLED="0"
         PATH=$OLD

         if [ "$INSTALLED" == "0" ]; then
            pimp ---c "west not installed in $VENV"
            read -p "shall I install west in $VENV [Y/n]?" ANS
				    if [ "$ANS" == "Y" ] || [ "$ANS" == "y" ] || [ "$ANS" == "" ]; then
               pimp ---g "=== installing west"
               pimp ---y "source $VENV/bin/activate"
               source $VENV/bin/activate
               pimp ---y "pip install west"
               pip install west
				    fi
         fi
      fi

      if [ -f $ROOT/manifest/west.yml ] && [ ! -d $ROOT/.west ]; then
         pimp ---c "west manifest file (manifest/west.yml) detected!"
         read -p "shall I init west workspace [Y/n]?" ANS
				 if [ "$ANS" == "Y" ] || [ "$ANS" == "y" ] || [ "$ANS" == "" ]; then
            pimp ---y "west init --local $ROOT/manifest"
            west init --local $ROOT/manifest
		     fi

         pimp ---c "workspace should be updated!"
         read -p "shall I update west workspace [Y/n]?" ANS
				 if [ "$ANS" == "Y" ] || [ "$ANS" == "y" ] || [ "$ANS" == "" ]; then
            pimp ---y "west update"
            west update
		     fi
      fi

         # next we consign the binaries

      if [ -f $ROOT/.pimp/consign ]; then
         pimp ---c "there is a consignment file (.pimp/consign)"
         read -p "shall I consign binaries and install in $VENV [Y/n]?" ANS
 		     if [ "$ANS" == "Y" ] || [ "$ANS" == "y" ] || [ "$ANS" == "" ]; then
            pimp ---y "pimp --consign"
            pimp --consign || exit

               # copy consigned binaries to virtual environment

            pimp ---g "=== copy consigned binaries to virtual environment"
            PIMP=`pimp --path .pimp`

            if [ "$PIMP" == "" ]; then
               pimp ---r "error: unable to locate .pimp directory" >&2
               exit 1
            fi

            if [ -d "$PIMP/bin" ]; then
  	           for FILE in $PIMP/bin/*
	             do
	                echo "  $FILE -> $VENV/bin"
	                cp $FILE $VENV/bin
	             done
            fi
		     fi
      fi

	    pimp ---g "=== pimping complete"
      exit 0
   fi

#===============================================================================
# cannot deal with anything else ...
#===============================================================================

   printf "\x1b[31m";
   echo "bad command line: pimp $*";  printf "\x1b[0m"
   echo '             for help invoke: pimp --help'
   exit 1
